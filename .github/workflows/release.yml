name: Maven Java Release with Test Coverage Control

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build, Test and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases
      issues: read
      checks: write
      pull-requests: write
    
    # Add PostgreSQL service
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test-password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    # Define environment variables with dummy values
    env:
      DB_NAME: postgres
      CURRENT_SCHEMA: user_auth_db
      DB_USERNAME: postgres
      DB_PASSWORD: test-password
      JWT_SECRET: dummy-jwt-secret-for-testing-only
      JWT_EXPIRATION_TIME: 3600000
      JWT_REMEMBER_ME_EXPIRATION_TIME: 86400000
      API_USERNAME: test_admin
      API_PASSWORD: test_password
      API_ROLES: ADMIN
    
    steps:
      - name: Configure Git
        run: sudo git config --system core.longpaths true
        
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetches all history for proper versioning
      
      # Set up development environment
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
          
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      # Install dependencies with caching
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen lcov libxml2-utils
          pip install coverxygen
          dotnet tool install -g dotnet-reportgenerator-globaltool
      
      # Initialize PostgreSQL database with schema
      - name: Initialize Database Schema
        run: |
          PGPASSWORD=$DB_PASSWORD psql -h localhost -U $DB_USERNAME -d $DB_NAME -f sql_tables.sql
      
      # Build and Test
      - name: Build and Test
        run: mvn clean test package
        working-directory: ./user-auth-system
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.DB_NAME }}?currentSchema=${{ env.CURRENT_SCHEMA }}
          SPRING_DATASOURCE_USERNAME: ${{ env.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.DB_PASSWORD }}
      
      # Create directories
      - name: Prepare Directories
        run: |
          mkdir -p target/site/{assets,coverxygen,doxygen,coveragereport}
        working-directory: ./user-auth-system
      
      # Check Test Coverage
      - name: Check Test Coverage
        run: |
          # Parse the JaCoCo XML report
          covered=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION'][last()]/@covered)" target/site/jacoco/jacoco.xml)
          missed=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION'][last()]/@missed)" target/site/jacoco/jacoco.xml)
          total=$((covered + missed))
          coverage_percentage=$(awk "BEGIN { printf \"%.2f\", ($covered / $total) * 100 }")
          
          echo "Coverage Percentage: $coverage_percentage%"
          echo "Covered Instructions: $covered"
          echo "Missed Instructions: $missed"
          
          # Fail if coverage is below threshold
          if (( $(echo "$coverage_percentage < 90" | bc -l) )); then
            echo "::error::Test coverage ($coverage_percentage%) is below the required threshold (90%)!"
            exit 1
          fi
          
          echo "coverage_percentage=$coverage_percentage" >> $GITHUB_ENV
        working-directory: ./user-auth-system
      
      # Generate documentation
      - name: Generate Doxygen Documentation
        run: doxygen Doxyfile
      
      - name: Verify Doxygen Output
        run: |
          if [ ! -f ./user-auth-system/target/site/doxygen/xml/index.xml ]; then
            echo "::error::Doxygen XML output not found!"
            ls -la ./user-auth-system/target/site/doxygen/xml || echo "XML directory not found!"
            exit 1
          fi
      
      # Generate reports
      - name: Generate Coverage Reports
        run: | 
          reportgenerator "-reports:target/site/jacoco/jacoco.xml" "-sourcedirs:src/main/java" "-targetdir:target/site/coveragereport" -reporttypes:Html,Badges
        working-directory: ./user-auth-system
      
      - name: Generate Documentation Coverage
        run: |
          PROJECT_ROOT=$(pwd)
          python -m coverxygen \
            --xml-dir $PROJECT_ROOT/user-auth-system/target/site/doxygen/xml \
            --src-dir $PROJECT_ROOT \
            --format lcov \
            --output $PROJECT_ROOT/user-auth-system/target/site/coverxygen/lcov.info \
            --prefix $PROJECT_ROOT/user-auth-system/
          
          genhtml $PROJECT_ROOT/user-auth-system/target/site/coverxygen/lcov.info \
            --legend \
            --title "Documentation Coverage Report" \
            -o $PROJECT_ROOT/user-auth-system/target/site/coverxygen
      
      # Copy and prepare assets
      - name: Prepare Assets
        run: |
          mkdir -p assets
          cp user-auth-system/target/site/coveragereport/badge_*.svg assets/
          cp README.md user-auth-system/src/site/markdown/readme.md
          cp -r ./assets/ ./user-auth-system/src/site/resources || echo "Assets not fully copied"
          (cd user-auth-system && mvn site)
      
      # Compress artifacts
      - name: Prepare Release Archives
        run: |
          tar -czf test-coverage-report.tar.gz -C user-auth-system/target/site/coveragereport .
          tar -czf doc-coverage-report.tar.gz -C user-auth-system/target/site/coverxygen .
          tar -czf app-documents.tar.gz -C user-auth-system/target/site/doxygen .
          tar -czf app-website.tar.gz -C user-auth-system/target/site .
      
      # Get commit info for release notes
      - name: Get Commit Info
        id: commit_info
        run: |
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          git log --format=%B -n 10 ${{ github.sha }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Create release and upload all assets in one step
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.MAVEN_TEMPLATE_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ### Changes in this Release
            ${{ steps.commit_info.outputs.summary }}
            
            ### Build Information
            - Test Coverage: ${{ env.coverage_percentage }}%
            
            ### Contributors
            Hikmethan Kolay
          files: |
            ./user-auth-system/target/user-auth-system-1.0-SNAPSHOT.jar
            ./test-coverage-report.tar.gz
            ./doc-coverage-report.tar.gz
            ./app-documents.tar.gz
            ./app-website.tar.gz
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.MAVEN_TEMPLATE_TOKEN }}
          publish_dir: ./user-auth-system/target/site
          full_commit_message: "Deploy site for ${{ github.ref_name }}"